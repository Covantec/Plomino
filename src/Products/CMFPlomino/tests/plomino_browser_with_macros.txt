Plomino browser tests
=========================

    >>> import zope.event, os, re
    >>> from zope.lifecycleevent import ObjectModifiedEvent

Set up login account

    >>> portal = layer['portal']
    >>> memberName = 'siteManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member', 'Manager',),
    ...         '',
    ...         {'fullname': 'Site Manager', 'email': memberName+'@dummy.fr',}
    ...         )
    >>> memberName = 'userManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member',),
    ...         '',
    ...         {'fullname': 'Site Member', 'email': memberName+'@dummy.fr',}
    ...         )

Create plomino database and publish it::

    >>> db = portal.mydb
    >>> wf_tool = portal.portal_workflow
    >>> wf_tool.doActionFor(db, 'publish')
    >>> db.manage_setLocalRoles('userManager', ['PlominoManager'])

Add some minimal content to test access (view 1 displays all documents)::

    >>> id = db.invokeFactory('PlominoForm', id='form1', title='Form 1')
    >>> id = db.form1.invokeFactory('PlominoField',
    ...         id='field1',
    ...         title='field1',
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> db.form1.field1.widget="TEXT"
    >>> db.form1.form_layout = """<p><label for="field1">field1</label><span class="plominoFieldClass">field1</span></p>"""


Create the browser object we'll be using::

    >>> browser = Browser(layer['app'])
    >>> browser.handleErrors = False
    >>> transaction.commit()  # enable the browser to see our changes


Open portal::

    >>> portal_url = portal.absolute_url()
    >>> browser.open(portal_url)

Log in with ``Site Manager`` access rights::

    >>> browser.getLink('Log in').click()
    >>> browser.getControl('Login Name').value = 'siteManager'
    >>> browser.getControl('Password').value = 'siteManager'
    >>> browser.getControl('Log in').click()


=======================
Generate View API Test
======================

    >>> form_url = portal_url +'/mydb' +'/form1'
    >>> browser.open(form_url)
    >>> token = browser.getControl(name='_authenticator').value

Post request to test new API that generate view with given form and fields

    >>> from urllib import urlencode
    >>> post_url = portal_url +'/mydb' +'/form1/manage_generateView'
    >>> data = urlencode(dict(id= 'view1', title='View1',form='form1',field='field1', _authenticator=token))
    >>> browser.addHeader('Content-Type','multipart/form-data')
    >>> browser.post(post_url, data)


Check if selection formula is created from macro and manual formula from old code is not inserted
    >>> formula = filter(lambda x: not re.match(r'^\s*$', x), db.view1.selection_formula.splitlines())
    >>> formula[0].startswith('### START macro_view_filter_by_form_attr')
    True
    >>> formula[-1].startswith('### END macro_view_filter_by_form_attr')
    True
