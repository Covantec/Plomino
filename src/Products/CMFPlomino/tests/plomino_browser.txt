Set up login account

    >>> portal = layer['portal']
    >>> memberName = 'siteManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member', 'Manager',),
    ...         '',
    ...         {'fullname': memberName, 'email': memberName+'@dummy.fr',}
    ...         )
    >>> memberName = 'userManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member',),
    ...         '',
    ...         {'fullname': memberName, 'email': memberName+'@dummy.fr',}
    ...         )

Create plomino database and publish it::

    >>> db = portal.mydb
    >>> wf_tool = portal.portal_workflow
    >>> wf_tool.doActionFor(db, 'publish')
    >>> db.manage_setLocalRoles('userManager', ['PlominoManager'])

Add some minimal content to test access (view 1 displays all documents)::

    >>> id = db.invokeFactory('PlominoForm', id='form1', title='Form 1')
    >>> id = db.form1.invokeFactory('PlominoField',
    ...         id='field1',
    ...         title='field1',
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> db.form1.field1.widget="TEXT"
    >>> db.form1.form_layout = """<p><label for="field1">field1</label><span class="plominoFieldClass">field1</span></p>"""


Create the browser object we'll be using::

    >>> browser = Browser(layer['app'])
    >>> transaction.commit()  # enable the browser to see our changes


Open portal::

    >>> portal_url = portal.absolute_url()
    >>> browser.open(portal_url)

Log in with ``Site Manager`` access rights::

    >>> browser.getLink('Log in').click()
    >>> browser.getControl('Login Name').value = 'siteManager'
    >>> browser.getControl('Password').value = 'siteManager'
    >>> browser.getControl('Log in').click()

The string of special characters we want to check the quoting
    >>> regex_str = 'This field contains \^${}[]{}.*+?<>-&'

===========
Plone Test
===========

Create new document

    >>> add_doc_url = portal_url + '/++add++Document'
    >>> browser.open(add_doc_url)
    >>> browser.getControl('Title').value = 'New Document'
    >>> browser.getControl('Summary').value = regex_str
    >>> browser.getControl('Save').click()
    >>> doc_url = portal_url + '/new-document'
    >>> browser.open(doc_url)

In HTML page, zope escape the backward slash, angle bracket, ampersand, strip nothing
    >>> regex_str in browser.contents
    False
    >>> 'This field contains \\^${}[]{}.*+?&lt;&gt;-&amp;' in browser.contents
    True

Search document in database to compare
    >>> site = layer['app']['plone']
    >>> path = '/'.join(site.getPhysicalPath())
    >>> catalog = site.portal_catalog
    >>> brains = catalog.unrestrictedSearchResults(path=path, Title='New Document', )
    >>> page = brains[0].getObject()
    >>> regex_str == page.description
    True

=============
Plomino Test
=============

Create new document

    >>> form_url = portal_url +'/mydb' +'/form1'
    >>> browser.open(form_url)
    >>> browser.getControl('field1').value = regex_str
    >>> browser.getControl('Save').click()

In HTML page, Plomino escape the backward slash, angle bracket, ampersand, cannot see the different between plus and space
    >>> regex_str in browser.contents
    False
    >>> 'This field contains \\^${}[]{}.*+?&lt;&gt;-&amp;' in browser.contents
    True

Search document in database to compare, Plomino strip the plus
    >>> import re
    >>> regex = r'.*/document/(.*)\?(.*)'
    >>> match = re.search(regex, browser.url)
    >>> docid = match.group(1)
    >>> doc = db.getDocument(docid)
    >>> regex_str.replace('+',' ') == doc.getItem('field1')
    False
    >>> regex_str ==  doc.getItem('field1')
    True

=======================
Generate View API Test
======================

Post request to test new API that generate view with given form and fields

    >>> import re
    >>> from urllib import urlencode
    >>> regex = r'.*\?_authenticator=(.*)'
    >>> match = re.search(regex, browser.url)
    >>> post_url = portal_url +'/mydb' +'/form1/manage_generateView'
    >>> data = urlencode(dict(id= 'view1', title='View1',form='form1',field='field1', _authenticator=match.group(1)))
    >>> browser.addHeader('Content-Type','multipart/form-data')
    >>> browser.post(post_url, data)

Check if view is created with name and column specified in inputed
    >>> db.view1 != None
    True
    >>> db.view1.getColumn('field1') != None
    True
    >>> db.view1.title =='View1'
    True
    >>> db.view1.helpers
    [...]


=============
Search Form
=============

Createa search form and view with some data

    >>> id = db.invokeFactory('PlominoForm', id='frm3', title='Form 3')
    >>> db.frm3.isSearchForm = True
    >>> db.frm3.search_view = 'search_view'
    >>> id = db.frm3.invokeFactory('PlominoField', id='field1',
    ...         title='Field1',
    ...         mandatory=True,
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> db.frm3.form_layout = """<p><label for="field1">Field1</label><span class="plominoFieldClass">field1</span></p>"""
    >>> id = db.invokeFactory('PlominoView', id='search_view',
    ...         title='View 1')
    >>> id = db.search_view.invokeFactory('PlominoColumn', id='col1',
    ...         title='Col 1', displayed_field = 'frm3/field1')

    >>> doc1 = db.createDocument()
    >>> doc1.setItem('field1','val1')
    >>> doc1.save()
    >>> doc2 = db.createDocument()
    >>> doc2.setItem('field1','val2')
    >>> doc2.save()
    >>> transaction.commit()  # enable the browser to see our changes


Make a GET request, expected all document found
    >>> form_url = portal_url +'/mydb' +'/frm3'
    >>> browser.open(form_url)
    >>> '<span>val1</span>' in browser.contents
    True
    >>> '<span>val2</span>' in browser.contents
    True

Now fill in search criteria for field1 and search again
    >>> browser.getForm(name='frm3').mech_form.enctype='application/x-www-form-urlencoded'
    >>> browser.getControl('Field1').value = 'val2'
    >>> browser.getControl(name='plomino_search').click()
    >>> '<span>val1</span>' in browser.contents
    False
    >>> '<span>val2</span>' in browser.contents
    True


