Set up login account

    >>> portal = layer['portal']
    >>> memberName = 'siteManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member', 'Manager',),
    ...         '',
    ...         {'fullname': 'Site Manager', 'email': memberName+'@dummy.fr',}
    ...         )
    >>> memberName = 'userManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member',),
    ...         '',
    ...         {'fullname': 'Site Member', 'email': memberName+'@dummy.fr',}
    ...         )

Create plomino database and publish it::

    >>> db = portal.mydb
    >>> wf_tool = portal.portal_workflow
    >>> wf_tool.doActionFor(db, 'publish')
    >>> db.manage_setLocalRoles('userManager', ['PlominoManager'])

Add some minimal content to test access (view 1 displays all documents)::

    >>> id = db.invokeFactory('PlominoForm', id='form1', title='Form 1')
    >>> id = db.form1.invokeFactory('PlominoField',
    ...         id='field1',
    ...         title='field1',
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> db.form1.field1.widget="TEXT"
    >>> db.form1.form_layout = """<p><label for="field1">field1</label><span class="plominoFieldClass">field1</span></p>"""


Create the browser object we'll be using::

    >>> browser = Browser(layer['app'])
    >>> browser.handleErrors = False
    >>> transaction.commit()  # enable the browser to see our changes


Open portal::

    >>> portal_url = portal.absolute_url()
    >>> browser.open(portal_url)

Log in with ``Site Manager`` access rights::

    >>> browser.getLink('Log in').click()
    >>> browser.getControl('Login Name').value = 'siteManager'
    >>> browser.getControl('Password').value = 'siteManager'
    >>> browser.getControl('Log in').click()

The string of special characters we want to check the quoting
    >>> regex_str = 'This field contains \^${}[]{}.*+?<>-&'


===========
Plone Test
===========

Create new document

    >>> add_doc_url = portal_url + '/++add++Document'
    >>> browser.open(add_doc_url)
    >>> browser.getControl('Title').value = 'New Document'
    >>> browser.getControl('Summary').value = regex_str
    >>> browser.getControl('Save').click()
    >>> doc_url = portal_url + '/new-document'
    >>> browser.open(doc_url)

In HTML page, zope escape the backward slash, angle bracket, ampersand, strip nothing
    >>> regex_str in browser.contents
    False
    >>> 'This field contains \\^${}[]{}.*+?&lt;&gt;-&amp;' in browser.contents
    True

Search document in database to compare
    >>> site = layer['app']['plone']
    >>> path = '/'.join(site.getPhysicalPath())
    >>> catalog = site.portal_catalog
    >>> brains = catalog.unrestrictedSearchResults(path=path, Title='New Document', )
    >>> page = brains[0].getObject()
    >>> regex_str == page.description
    True

=============
Plomino Test
=============

Create new document

    >>> form_url = portal_url +'/mydb' +'/form1'
    >>> browser.open(form_url)
    >>> browser.getControl('field1').value = regex_str
    >>> browser.getControl('Save').click()

In HTML page, Plomino escape the backward slash, angle bracket, ampersand, cannot see the different between plus and space
    >>> regex_str in browser.contents
    False
    >>> 'This field contains \\^${}[]{}.*+?&lt;&gt;-&amp;' in browser.contents
    True

Search document in database to compare, Plomino strip the plus
    >>> import re
    >>> regex = r'.*/document/(.*)\?(.*)'
    >>> match = re.search(regex, browser.url)
    >>> docid = match.group(1)
    >>> doc = db.getDocument(docid)
    >>> regex_str.replace('+',' ') == doc.getItem('field1')
    False
    >>> regex_str ==  doc.getItem('field1')
    True

=======================
Generate View API Test
======================

Post request to test new API that generate view with given form and fields

    >>> import re
    >>> from urllib import urlencode
    >>> regex = r'.*\?_authenticator=(.*)'
    >>> match = re.search(regex, browser.url)
    >>> post_url = portal_url +'/mydb' +'/form1/manage_generateView'
    >>> data = urlencode(dict(id= 'view1', title='View1',form='form1',field='field1', _authenticator=match.group(1)))
    >>> browser.addHeader('Content-Type','multipart/form-data')
    >>> browser.post(post_url, data)

Check if view is created with name and column specified in inputed
    >>> db.view1 != None
    True
    >>> db.view1.getColumn('field1') != None
    True
    >>> db.view1.title =='View1'
    True
    >>> db.view1.helpers
    [...]


=============
Search Form
=============

Createa search form and view with some data

    >>> id = db.invokeFactory('PlominoForm', id='frm3', title='Form 3')
    >>> db.frm3.isSearchForm = True
    >>> db.frm3.search_view = 'search_view'
    >>> id = db.frm3.invokeFactory('PlominoField', id='field1',
    ...         title='Field1',
    ...         mandatory=True,
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> db.frm3.form_layout = """<p><label for="field1">Field1</label><span class="plominoFieldClass">field1</span></p>"""
    >>> id = db.invokeFactory('PlominoView', id='search_view',
    ...         title='View 1')
    >>> id = db.search_view.invokeFactory('PlominoColumn', id='col1',
    ...         title='Col 1', displayed_field = 'frm3/field1')

    >>> doc1 = db.createDocument()
    >>> doc1.setItem('field1','val1')
    >>> doc1.save()
    >>> doc2 = db.createDocument()
    >>> doc2.setItem('field1','val2')
    >>> doc2.save()
    >>> transaction.commit()  # enable the browser to see our changes


Make a GET request, expected all document found
    >>> form_url = portal_url +'/mydb' +'/frm3'
    >>> browser.open(form_url)
    >>> '<span>val1</span>' in browser.contents
    True
    >>> '<span>val2</span>' in browser.contents
    True

Now fill in search criteria for field1 and search again
    >>> browser.getForm(name='frm3').mech_form.enctype='application/x-www-form-urlencoded'
    >>> browser.getControl('Field1').value = 'val2'
    >>> browser.getControl(name='plomino_search').click()
    >>> '<span>val1</span>' in browser.contents
    False
    >>> '<span>val2</span>' in browser.contents
    True


==================
Name Field Search
=================

Createa form with name field

    >>> id = db.invokeFactory('PlominoForm', id='frm4', title='Form 4')
    >>> id = db.frm4.invokeFactory('PlominoField', id='field1',
    ...         title='Field1',
    ...         mandatory=True,
    ...         field_type="NAME",
    ...         type="SINGLE",
    ...         selector="FIELD",
    ...         field_mode="EDITABLE")
    >>> db.frm4.form_layout = """<p><label for="field1">Field1</label><span class="plominoFieldClass">field1</span></p>"""
    >>> transaction.commit()  # enable the browser to see our changes

Open the form and make input user id in the name field
    >>> form_url = portal_url +'/mydb' +'/frm4'
    >>> browser.open(form_url)
    >>> browser.getControl('Field1').value = 'site'
    >>> browser.getControl('Save').click()
    >>> 'User not found' in browser.contents
    True
    >>> browser.getControl('Field1').value = 'siteManager'
    >>> browser.getControl('Save').click()
    >>> 'Site Manager' in browser.contents
    True

Open the form and search the name on-the-fly
    >>> from urllib import urlencode
    >>> import json
    >>> search_url = portal_url +'/mydb' +'/frm4/field1/filterusers?'
    >>> query = urlencode(dict(query= 'Manager', page_limit='10',page='1'))
    >>> browser.open(search_url + query)
    >>> search_result = json.loads(browser.contents)

Should display two resutls, siteManager and userManager
    >>> search_result['total'] == 2
    True

Now, turn off the feature listing database user, search result will be empty
    >>> db.do_not_list_users =  True
    >>> transaction.commit()
    >>> browser.open(search_url + query)
    >>> search_result = json.loads(browser.contents)
    >>> search_result['total'] == 0
    True

Turn on the feature listing database user again, but enable Plone many_user feature, the search result will also return nothing
    >>> db.do_not_list_users =  False
    >>> transaction.commit()
    >>> browser.open(search_url + query)
    >>> search_result = json.loads(browser.contents)
    >>> search_result['total'] == 2
    True

    >>> browser.open(portal_url)
    >>> browser.getLink('Site Setup').click()
    >>> browser.getLink('Users and Groups').click()
    >>> browser.getLink('Settings').click()
    >>> browser.getControl('Many users').click()
    >>> browser.getControl('Save').click()

    >>> browser.open(search_url + query)
    >>> search_result = json.loads(browser.contents)
    >>> search_result['total'] == 0
    True

================================
Multi-page File Attachment Test
===============================

Create single-page form with file attachment and test backward compatibility
    >>> import os
    >>> id = db.invokeFactory('PlominoForm', id='sp_frm1', title='Single-page Form 1')
    >>> id = db.sp_frm1.invokeFactory('PlominoField',
    ...             id='attach_1',
    ...             title='Field Attachment 1',
    ...             field_type="ATTACHMENT",
    ...             field_mode="EDITABLE",
    ...             single_or_multiple="MULTI")
    >>> id = db.sp_frm1.invokeFactory('PlominoField',
    ...             id='text_1',
    ...             title='Text1 1',
    ...             field_type="TEXT",
    ...             field_mode="EDITABLE",
    ...             mandatory=True)
    >>> db.sp_frm1.form_layout = """<p><label for="attach_1">Attach 1</label><span class="plominoFieldClass">attach_1</span></p>
    ...     <p><label for="text_1">Text 1</label><span class="plominoFieldClass">text_1</span></p>"""
    >>> transaction.commit()

Artificially remove temporary folder and single-page form can save successully
    >>> db.manage_delObjects('temporary_files')
    >>> form_url = portal_url +'/mydb' +'/sp_frm1'
    >>> browser.open(form_url)
    >>> test_file = os.path.join(os.path.dirname(__file__), "plomino_browser.txt")
    >>> file_upload_ctl = browser.getControl(name='attach_1')
    >>> file_upload_ctl.add_file(open(test_file), 'text/html',  'plomino_browser.txt')
    >>> browser.getControl(name='text_1').value = 'Input text 1'
    >>> browser.getControl('Save').click()
    >>> 'plomino_browser.txt' in browser.contents
    True
    >>> temp_storage = getattr(db,'temporary_files',None)
    >>> len(temp_storage.objectItems())
    0

In case of unsuccessful validatation, the attachment is still in the server (i.e user need not to re-upload the attachment)
    >>> browser.open(form_url)
    >>> test_file = os.path.join(os.path.dirname(__file__), "plomino_browser.txt")
    >>> file_upload_ctl = browser.getControl(name='attach_1')
    >>> file_upload_ctl.add_file(open(test_file), 'text/html',  'plomino_browser.txt')
    >>> browser.getControl('Save').click()
    >>> 'Validation failed' in browser.contents
    True
    >>> 'plomino_browser.txt' in browser.contents
    True
    >>> len(temp_storage.objectItems())
    1

Then save again
    >>> browser.getControl(name='text_1').value = 'Input text 2'
    >>> browser.getControl('Save').click()
    >>> 'plomino_browser.txt' in browser.contents
    True
    >>> len(temp_storage.objectItems())
    0

Createa multi-page form with file attachment

    >>> import os
    >>> id = db.invokeFactory('PlominoForm', id='mp_frm1', title='Multi-page Form 1')
    >>> id = db.mp_frm1.invokeFactory('PlominoField',
    ...             id='attach_1',
    ...             title='Field Attachment 1',
    ...             field_type="ATTACHMENT",
    ...             field_mode="EDITABLE",
    ...             single_or_multiple="MULTI")
    >>> db.mp_frm1.form_layout = """<p><label for="attach_1">Attach 1</label><span class="plominoFieldClass">attach_1</span></p>
    ...     <hr class="plominoPagebreakClass">"""
    >>> temp_storage = getattr(db,'temporary_files',None)
    >>> transaction.commit()


Test as if single page file upload (Save the document right at the first page)
    >>> form_url = portal_url +'/mydb' +'/mp_frm1/page/1'
    >>> browser.open(form_url)
    >>> test_file = os.path.join(os.path.dirname(__file__), "plomino_browser.txt")
    >>> file_upload_ctl = browser.getControl(name='attach_1')
    >>> file_upload_ctl.add_file(open(test_file), 'text/html',  'plomino_browser.txt')
    >>> browser.getControl('Save').click()
    >>> 'plomino_browser.txt' in browser.contents
    True

#   Multiple file upload testing not work with browser test due to variation of implementation of file uploads
#   - Browser test store multiple file as list of FileStorage object
#   - Plomino stored mutiple files as list of FileUpload object


Open the multi-page form and upload single files
    >>> form_url = portal_url +'/mydb' +'/mp_frm1/page/1'
    >>> browser.open(form_url)
    >>> test_file = os.path.join(os.path.dirname(__file__), "plomino_browser.txt")
    >>> file_upload_ctl = browser.getControl(name='attach_1')
    >>> file_upload_ctl.add_file(open(test_file), 'text/html',  'plomino_browser.txt')

Go back and forth to see if the file is saved
    >>> len(temp_storage.objectItems())
    0
    >>> browser.getControl('Next').click()
    >>> len(temp_storage.objectItems())
    1
    >>> browser.getControl('Previous').click()
    >>> 'plomino_browser.txt' in browser.contents
    True
    >>> len(temp_storage.objectItems())
    1

Add one more file and check if the old file is still there
    >>> file_upload_ctl = browser.getControl(name='attach_1')
    >>> alt_file = os.path.join(os.path.dirname(__file__), "plomino_import_export.txt")
    >>> file_upload_ctl.add_file(open(alt_file), 'text/html',  'plomino_import_export.txt')
    >>> browser.getControl('Next').click()
    >>> len(temp_storage.objectItems())
    2
    >>> browser.getControl('Previous').click()
    >>> 'plomino_browser.txt' in browser.contents
    True
    >>> 'plomino_import_export.txt' in browser.contents
    True

Try to delete a file
    >>> browser.getControl(name='attachment-delete').value = [browser.getLink('plomino_import_export.txt').text]
    >>> browser.getControl('Next').click()
    >>> len(temp_storage.objectItems())
    1
    >>> 'plomino_import_export.txt' in browser.contents
    False

Save the form and the file is saved into the document, and removed from temp storage

    >>> browser.getControl('Save').click()
    >>> 'plomino_browser.txt' in browser.contents
    True
    >>> len(temp_storage.objectItems())
    0


Test existing document can update attachment
    >>> doc_url = browser.url
    >>> edit_doc_url = doc_url.split('pageview/1')[0]+ 'EditDocument'
    >>> browser.open(edit_doc_url)
    >>> file_upload_ctl = browser.getControl(name='attach_1')
    >>> alt_file = os.path.join(os.path.dirname(__file__), "plomino_macros.txt")
    >>> file_upload_ctl.add_file(open(alt_file), 'text/html',  'plomino_macros.txt')
    >>> browser.getControl('Save').click()
    >>> browser.getControl('Previous').click()
    >>> 'plomino_macros.txt' in browser.contents
    True

Try to delete a file from document
    >>> browser.open(edit_doc_url)
    >>> browser.getControl(name='attachment-delete').value = [browser.getLink('plomino_macros.txt').text]
    >>> browser.getControl('Save').click()
    >>> 'plomino_macros.txt' in browser.contents
    False

Test the clearance of expired attachment by mocking up the time in future
#    >>> import time, sys
#    >>> browser.open(form_url)
#    >>> file_upload_ctl = browser.getControl(name='attach_1')
#    >>> file_upload_ctl.add_file(open(test_file), 'text/html',  'plomino_browser.txt')
#    >>> browser.getControl('Next').click()
#    >>> len(temp_storage.objectItems())
#    1
#    >>> browser.open(form_url)
#    >>> time_orig = time.time
#    >>> time.time = lambda : time_orig() + 60*1000
#    >>> file_upload_ctl = browser.getControl(name='attach_1')
#    >>> file_upload_ctl.add_file(open(test_file), 'text/html',  'plomino_browser.txt')
#    >>> browser.getControl('Save').click()
#    >>> time.time = time_orig
#    >>> len(temp_storage.objectItems())
#    0

Test file attachment in sub-form
    >>> parent1 = db.invokeFactory('PlominoForm', id='parent1', title='Parent Form 1')
    >>> db.parent1.setForm_layout("""<p>Form with empty sub-form</p><span class="plominoSubformClass">sp_frm1</span>""")
    >>> transaction.commit()
    >>> parent_form_url = portal_url +'/mydb' +'/parent1'
    >>> browser.open(parent_form_url)
    >>> test_file = os.path.join(os.path.dirname(__file__), "plomino_browser.txt")
    >>> file_upload_ctl = browser.getControl(name='attach_1')
    >>> file_upload_ctl.add_file(open(test_file), 'text/html',  'plomino_browser.txt')
    >>> browser.getControl(name='text_1').value = 'Input text 1'
    >>> browser.getControl('Save').click()
    >>> 'plomino_browser.txt' in browser.contents
    True
    >>> temp_storage = getattr(db,'temporary_files',None)
    >>> len(temp_storage.objectItems())
    0

Check if another anonymous user cannot view your temporary file
    >>> browser.open(form_url)
    >>> test_file = os.path.join(os.path.dirname(__file__), "plomino_browser.txt")
    >>> file_upload_ctl = browser.getControl(name='attach_1')
    >>> file_upload_ctl.add_file(open(test_file), 'text/html',  'plomino_browser.txt')
    >>> browser.getControl('Next').click()
    >>> browser.getControl('Previous').click()
    >>> temp_file_url = browser.getLink(text='plomino_browser.txt').url
    >>> browser.open(temp_file_url)
    >>> 'Check if another anonymous user cannot view your temporary file' in browser.contents
    True
    >>> second_browser = Browser(layer['app'])
    >>> second_browser.open(temp_file_url)
    >>> 'Check if another anonymous user cannot view your temporary file' in second_browser.contents
    False




