Plomino browser tests
=========================


Set up login account

    >>> portal = layer['portal']
    >>> memberName = 'siteManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member', 'Manager',),
    ...         '',
    ...         {'fullname': 'Site Manager', 'email': memberName+'@dummy.fr',}
    ...         )
    >>> memberName = 'userManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member',),
    ...         '',
    ...         {'fullname': 'Site Member', 'email': memberName+'@dummy.fr',}
    ...         )

Create plomino database and publish it::

    >>> db = portal.mydb
    >>> wf_tool = portal.portal_workflow
    >>> wf_tool.doActionFor(db, 'publish')
    >>> db.manage_setLocalRoles('userManager', ['PlominoManager'])

Add some minimal content to test access (view 1 displays all documents)::

    >>> id = db.invokeFactory('PlominoForm', id='form1', title='Form 1')
    >>> id = db.form1.invokeFactory('PlominoField',
    ...         id='field1',
    ...         title='field1',
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> db.form1.field1.widget="TEXT"
    >>> db.form1.form_layout = """<p><label for="field1">field1</label><span class="plominoFieldClass">field1</span></p>"""


Create the browser object we'll be using::

    >>> browser = Browser(layer['app'])
    >>> browser.handleErrors = False
    >>> transaction.commit()  # enable the browser to see our changes


Open portal::

    >>> portal_url = portal.absolute_url()
    >>> browser.open(portal_url)

Log in with ``Site Manager`` access rights::

    >>> browser.getLink('Log in').click()
    >>> browser.getControl('Login Name').value = 'siteManager'
    >>> browser.getControl('Password').value = 'siteManager'
    >>> browser.getControl('Log in').click()

The string of special characters we want to check the quoting
    >>> regex_str = 'This field contains \^${}[]{}.*+?<>-&'


===========
Plone Test
===========

Create new document

    >>> add_doc_url = portal_url + '/++add++Document'
    >>> browser.open(add_doc_url)
    >>> browser.getControl('Title').value = 'New Document'
    >>> browser.getControl('Summary').value = regex_str
    >>> browser.getControl('Save').click()
    >>> doc_url = portal_url + '/new-document'
    >>> browser.open(doc_url)

In HTML page, zope escape the backward slash, angle bracket, ampersand, strip nothing
    >>> regex_str in browser.contents
    False
    >>> 'This field contains \\^${}[]{}.*+?&lt;&gt;-&amp;' in browser.contents
    True

Search document in database to compare
    >>> site = layer['app']['plone']
    >>> path = '/'.join(site.getPhysicalPath())
    >>> catalog = site.portal_catalog
    >>> brains = catalog.unrestrictedSearchResults(path=path, Title='New Document', )
    >>> page = brains[0].getObject()
    >>> regex_str == page.description
    True

=============
Plomino Test
=============

Create new document

    >>> form_url = portal_url +'/mydb' +'/form1'
    >>> browser.open(form_url)
    >>> browser.getControl('field1').value = regex_str
    >>> browser.getControl('Save').click()

In HTML page, Plomino escape the backward slash, angle bracket, ampersand, cannot see the different between plus and space
    >>> regex_str in browser.contents
    False
    >>> 'This field contains \\^${}[]{}.*+?&lt;&gt;-&amp;' in browser.contents
    True

Search document in database to compare, Plomino strip the plus
    >>> import re
    >>> regex = r'.*/document/(.*)\?(.*)'
    >>> match = re.search(regex, browser.url)
    >>> docid = match.group(1)
    >>> doc = db.getDocument(docid)
    >>> regex_str.replace('+',' ') == doc.getItem('field1')
    False
    >>> regex_str ==  doc.getItem('field1')
    True

=======================
Generate View API Test
======================

Post request to test new API that generate view with given form and fields

    >>> from urllib import urlencode
    >>> token = browser.getControl(name='_authenticator').value
    >>> post_url = portal_url +'/mydb' +'/form1/manage_generateView'
    >>> data = urlencode(dict(id= 'view1', title='View1',form='form1',field='field1', token=token))
    >>> browser.addHeader('Content-Type','multipart/form-data')
    >>> browser.post(post_url, data)


Check if view is created with name and column specified in inputed
    >>> db.view1 != None
    True
    >>> db.view1.getColumn('field1') != None
    True
    >>> db.view1.title =='View1'
    True
    >>> db.view1.helpers
    [...]



==================
Name Field Search
=================

Createa form with name field

    >>> id = db.invokeFactory('PlominoForm', id='frm4', title='Form 4')
    >>> id = db.frm4.invokeFactory('PlominoField', id='field1',
    ...         title='Field1',
    ...         mandatory=True,
    ...         field_type="NAME",
    ...         type="SINGLE",
    ...         selector="FIELD",
    ...         field_mode="EDITABLE")
    >>> db.frm4.form_layout = """<p><label for="field1">Field1</label><span class="plominoFieldClass">field1</span></p>"""
    >>> transaction.commit()  # enable the browser to see our changes

Open the form and make input user id in the name field
    >>> form_url = portal_url +'/mydb' +'/frm4'
    >>> browser.open(form_url)
    >>> browser.getControl('Field1').value = 'site'
    >>> browser.getControl('Save').click()
    >>> 'User not found' in browser.contents
    True
    >>> browser.getControl('Field1').value = 'siteManager'
    >>> browser.getControl('Save').click()
    >>> 'Site Manager' in browser.contents
    True

Open the form and search the name on-the-fly
    >>> from urllib import urlencode
    >>> import json
    >>> search_url = portal_url +'/mydb' +'/frm4/field1/filterusers?'
    >>> query = urlencode(dict(query= 'Manager', page_limit='10',page='1'))
    >>> browser.open(search_url + query)
    >>> search_result = json.loads(browser.contents)

Should display two resutls, siteManager and userManager
    >>> search_result['total'] == 2
    True

Now, turn off the feature listing database user, search result will be empty
    >>> db.do_not_list_users =  True
    >>> transaction.commit()
    >>> browser.open(search_url + query)
    >>> search_result = json.loads(browser.contents)
    >>> search_result['total'] == 0
    True

Turn on the feature listing database user again, but enable Plone many_user feature, the search result will also return nothing
    >>> db.do_not_list_users =  False
    >>> transaction.commit()
    >>> browser.open(search_url + query)
    >>> search_result = json.loads(browser.contents)
    >>> search_result['total'] == 2
    True

    >>> browser.open(portal_url)
    >>> browser.getLink('Site Setup').click()
    >>> browser.getLink('Users and Groups').click()
    >>> browser.getLink('Settings').click()
    >>> browser.getControl('Many users').click()
    >>> browser.getControl('Save').click()

    >>> browser.open(search_url + query)
    >>> search_result = json.loads(browser.contents)
    >>> search_result['total'] == 0
    True


===============================
Do Not List User setting Test
===============================

    >>> from plone import api

Turn off Plone many_users Setting

    >>> browser.open(portal_url)
    >>> browser.getLink('Site Setup').click()
    >>> browser.getLink('Users and Groups').click()
    >>> browser.getLink('Settings').click()
    >>> browser.getControl('Many users').selected = False
    >>> browser.getControl('Save').click()

Create new DB and check the do_not_list_user setting =  False

    >>> db1 = api.content.create(type='PlominoDatabase', id='db1', title='db1', container=portal)
    >>> db1.do_not_list_users
    False

Browser the DB setting and verify that Do_not_list_user is visible

    >>> transaction.commit()
    >>> form_url = portal_url +'/db1/edit'
    >>> browser.open(form_url)
    >>> control = browser.getControl(name='form.widgets.do_not_list_users:list')
    >>> control.type
    'checkbox'

Set and get do_not_list_user will follow the updated value

    >>> db1.do_not_list_users =  True
    >>> db1.do_not_list_users
    True
    >>> db1.do_not_list_users = False
    >>> db1.do_not_list_users
    False

Turn on Plone many_users Setting

    >>> browser.open(portal_url)
    >>> browser.getLink('Site Setup').click()
    >>> browser.getLink('Users and Groups').click()
    >>> browser.getLink('Settings').click()
    >>> browser.getControl('Many users').selected = True
    >>> browser.getControl('Save').click()

Create new DB and check the do_not_list_user setting =  True

    >>> db2 = api.content.create(type='PlominoDatabase', id='db2', title='db2', container=portal)
    >>> db2.do_not_list_users
    True

Browser the DB setting and verify that Do_not_list_user is hidden

    >>> transaction.commit()
    >>> form_url = portal_url +'/db2/edit'
    >>> browser.open(form_url)
    >>> control = browser.getControl(name='form.widgets.do_not_list_users:list')
    >>> control.type
    'hidden'

Set and get do_not_list_user will follow the Plone setting many_user

    >>> db1.do_not_list_users =  True
    >>> db1.do_not_list_users
    True
    >>> db1.do_not_list_users = False
    >>> db1.do_not_list_users
    True