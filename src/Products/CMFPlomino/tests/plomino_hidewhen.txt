Plomino browser tests
=========================


Set up login account

    >>> portal = layer['portal']
    >>> memberName = 'siteManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member', 'Manager',),
    ...         '',
    ...         {'fullname': 'Site Manager', 'email': memberName+'@dummy.fr',}
    ...         )
    >>> memberName = 'userManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member',),
    ...         '',
    ...         {'fullname': 'Site Member', 'email': memberName+'@dummy.fr',}
    ...         )

Create plomino database and publish it::

    >>> db = portal.mydb
    >>> wf_tool = portal.portal_workflow
    >>> wf_tool.doActionFor(db, 'publish')
    >>> db.manage_setLocalRoles('userManager', ['PlominoManager'])

Create the browser object we'll be using::

    >>> browser = Browser(layer['app'])
    >>> browser.handleErrors = False
    >>> transaction.commit()  # enable the browser to see our changes


Open portal::

    >>> portal_url = portal.absolute_url()
    >>> browser.open(portal_url)

Log in with ``Site Manager`` access rights::

    >>> browser.getLink('Log in').click()
    >>> browser.getControl('Login Name').value = 'siteManager'
    >>> browser.getControl('Password').value = 'siteManager'
    >>> browser.getControl('Log in').click()



==================================================
Mandatory Field Validation Test inside hidewhen
==================================================


Createa single-page form with mandatory field inside hidewhen

    >>> id = db.invokeFactory('PlominoForm', id='frm1', title='Form 1')
    >>> id = db.frm1.invokeFactory('PlominoField', id='field1',
    ...         title='Field1',
    ...         mandatory=True,
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> id = db.frm1.invokeFactory('PlominoField', id='field2',
    ...         title='Field2',
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> id = db.frm1.invokeFactory('PlominoHidewhen', id='hw1',
    ...         title='Hidewhen',
    ...         field_type="HIDEWHEN",
    ...         formula="return plominoContext.getItem('field2','')!='Apple'")
    >>> db.frm1.form_layout = """<span class="plominoHidewhenClass">start:hw1</span>
    ...     <p><label for="field1">Field1</label><span class="plominoFieldClass">field1</span></p>
    ...     <span class="plominoHidewhenClass">end:hw1</span>
    ...     <p><label for="field2">Field2</label><span class="plominoFieldClass">field2</span></p>
    ...     """
    >>> transaction.commit()

Open the form and submit the form without value for mandatory
    >>> form_url = portal_url +'/mydb' +'/frm1'
    >>> browser.open(form_url)
    >>> browser.getControl('Field2').value = 'Apple'
    >>> browser.getControl('Save').click()
    >>> 'Validation failed' in browser.contents
    True


Createa multi-page form with mandatory field inside hidewhen

    >>> id = db.invokeFactory('PlominoForm', id='frm2', title='Form 1')
    >>> id = db.frm2.invokeFactory('PlominoField', id='field1',
    ...         title='Field1',
    ...         mandatory=True,
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> id = db.frm2.invokeFactory('PlominoField', id='field2',
    ...         title='Field2',
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> id = db.frm2.invokeFactory('PlominoHidewhen', id='hw1',
    ...         title='Hidewhen',
    ...         field_type="HIDEWHEN",
    ...         formula="return plominoContext.getItem('field2','')!='Apple'")
    >>> db.frm2.form_layout = """<p><label for="field2">Field2</label><span class="plominoFieldClass">field2</span></p>
    ...     <hr class="plominoPagebreakClass">
    ...     <span class="plominoHidewhenClass">start:hw1</span>
    ...     <p><label for="field1">Field1</label><span class="plominoFieldClass">field1</span></p>
    ...     <span class="plominoHidewhenClass">end:hw1</span>
    ...     <hr class="plominoPagebreakClass">
    ...     """
    >>> transaction.commit()

Open the form and submit the form without value for mandatory
    >>> form_url = portal_url +'/mydb' +'/frm2'
    >>> browser.open(form_url)
    >>> browser.getControl('Field2').value = 'Apple'
    >>> browser.getControl('Next').click()
    >>> browser.getControl('Next').click()
    >>> 'Validation failed' in browser.contents
    True


Createa subform with mandatory field inside hidewhen

    >>> id = db.invokeFactory('PlominoForm', id='frm3', title='Form 3')
    >>> db.frm3.form_layout = """<span class="plominoSubformClass">frm1</span>
    ...     <hr class="plominoPagebreakClass">
    ...     """
    >>> transaction.commit()

Open the form and submit the form without value for mandatory
    >>> form_url = portal_url +'/mydb' +'/frm3'
    >>> browser.open(form_url)
    >>> browser.getControl('Field2').value = 'Apple'
    >>> browser.getControl('Next').click()
    >>> 'Validation failed' in browser.contents
    True


Createa child-form with mandatory field inside hidewhen

    >>> id = db.invokeFactory('PlominoForm', id='frm4', title='Form 4')
    >>> id = db.frm4.invokeFactory('PlominoField',
    ...         id='datagrid',
    ...         title='Field datagrid',
    ...         field_type="DATAGRID",
    ...         associated_form = 'frm1')
    >>> db.frm4.form_layout = """<p><span class="plominoFieldClass">datagrid</span></p>"""""
    >>> transaction.commit()

Open the form and submit the form without value for mandatory

    >>> from urllib import urlencode
    >>> import json
    >>> form_url = portal_url +'/mydb' +'/frm4'
    >>> post_url = portal_url +'/mydb' +'/frm1/createDocument'
    >>> browser.open(form_url)
    >>> token = browser.getControl(name='_authenticator').value
    >>> data = urlencode(dict(Form= 'frm1', Field2='Apple',Plomino_Parent_Field='datagrid',Plomino_Parent_Form='frm4', token=token, plomino_save='Save'))
    >>> browser.addHeader('Content-Type','multipart/form-data')
    >>> browser.post(post_url, data)
    >>> resp = json.loads(browser.contents)
    >>> 'errors' in resp
    True