Plomino view tests
==================

Set up login account

    >>> portal = layer['portal']
    >>> memberName = 'siteManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member', 'Manager',),
    ...         '',
    ...         {'fullname': 'Site Manager', 'email': memberName+'@dummy.fr',}
    ...         )

Open portal:

    >>> db = portal.mydb
    >>> wf_tool = portal.portal_workflow
    >>> wf_tool.doActionFor(db, 'publish')
    >>> transaction.commit()

    >>> browser = Browser(layer['app'])
    >>> browser.handleErrors = False
    >>> portal_url = portal.absolute_url()
    >>> browser.open(portal_url)

Log in with ``Site Manager`` access rights::

    >>> browser.getLink('Log in').click()
    >>> browser.getControl('Login Name').value = 'siteManager'
    >>> browser.getControl('Password').value = 'siteManager'
    >>> browser.getControl('Log in').click()

When csv export in view, the multi select data is readable in csv file

    >>> id = db.invokeFactory("PlominoForm", 
    ...         id="frm1",
    ...         title="Form 1")
    >>> id = db.frm1.invokeFactory("PlominoField",
    ...         id="field1",
    ...         title="Title for field 1",
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> id = db.frm1.invokeFactory("PlominoField",
    ...         id="field2",
    ...         title="Title for field 2",
    ...         field_type="SELECTION",
    ...         field_mode="EDITABLE")
    >>> db.frm1.field2.widget = "CHECKBOX"
    >>> db.frm1.field2.selectionlist = [
    ...         u"John Paul Jones",
    ...         u"Chris Chameleon",
    ...         u"Serba, John"]
    >>> id = db.frm1.invokeFactory("PlominoField",
    ...         id="field3",
    ...         title="Title for field 3",
    ...         field_type="SELECTION",
    ...         field_mode="EDITABLE")
    >>> db.frm1.field3.widget = "CHECKBOX"
    >>> db.frm1.field3.selectionlist = [
    ...         u"Jones John Paul",
    ...         u"Chameleon Chris",
    ...         u"John, Serba"]
    >>> id = db.invokeFactory("PlominoView",
    ...         id="view1",
    ...         title="View 1",
    ...         selection_formula="plominoDocument.getItem('Form')=='frm1'")
    >>> id = db.view1.invokeFactory("PlominoColumn",
    ...         id="col1",
    ...         title="Col 1",
    ...         formula="plominoDocument.field1")
    >>> id = db.view1.invokeFactory("PlominoColumn",
    ...         id="col2",
    ...         title="Col 2",
    ...         displayed_field="frm1/field2")
    >>> id = db.view1.invokeFactory("PlominoColumn",
    ...         id="col3",
    ...         title="Col 3",
    ...         formula="plominoDocument.field3")
    >>> db.view1.sort_column = "col1"
    >>> doc1 = db.createDocument()
    >>> doc1.setItem("Form", "frm1")
    >>> doc1.setItem("field1", "sumo")
    >>> doc1.setItem("field2", [
    ...         u"John Paul Jones",
    ...         u"Chris Chameleon"])
    >>> doc1.setItem("field3", [
    ...         u"John, Serba"])
    >>> doc1.save(creation=True)
    >>> doc2 = db.createDocument()
    >>> doc2.setItem("Form", "frm1")
    >>> doc2.setItem("field1", "sumi")
    >>> doc2.setItem("field2", [
    ...         u"Serba, John"])
    >>> doc2.setItem("field3", [
    ...         u"Jones John Paul",
    ...         u"Chameleon Chris"])
    >>> doc2.save(creation=True)
    >>> len(db.view1.getAllDocuments())
    2
    >>> db.view1.exportCSV()
    '"sumi"\t"Serba\\, John"\t"Jones John Paul, Chameleon Chris"\r\n"sumo"\t"John Paul Jones, Chris Chameleon"\t"John\\, Serba"\r\n'


=======================================
Test unindexing document after deleted
=======================================

Delete document from the view will also unindex the document

    >>> doc_list = db.view1.getAllDocuments()

    >>> doc1.id in [doc.id for doc in doc_list]
    True
    >>> db.deleteDocuments(ids=[doc1.id])
    >>> doc_list = db.view1.getAllDocuments()
    >>> doc1.id not in [doc.id for doc in doc_list]
    True

    >>> doc2.id in [doc.id for doc in doc_list]
    True
    >>> db.deleteDocuments(ids=[doc2.id], massive=False)
    >>> doc_list = db.view1.getAllDocuments()
    >>> doc2.id not in [doc.id for doc in doc_list]
    True

Delete document by create new document and get exception

    >>> doc_list = db.view1.getAllDocuments()
    >>> len(db.view1.getAllDocuments())
    0
    >>> db.frm1.onCreateDocument = "return 'Error'"
    >>> db.frm1.form_layout = """<p><label for="field1">field1</label><span class="plominoFieldClass">field1</span></p>"""
    >>> transaction.commit()

    >>> form_url = portal_url +'/mydb' +'/frm1'
    >>> browser.open(form_url)
    >>> browser.getControl('Save').click()
    >>> len(db.view1.getAllDocuments())
    0